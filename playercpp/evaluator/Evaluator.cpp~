#include "Evaluator.hpp"

#include <iostream>

extern "C" {
#include "pbots_calc-master/src/pbots_calc.h"
}

Evaluator::Evaluator(){}

/* evaluate current hand given board cards and discard 
 TODO: use opponent hand distribution or implied equity */
double Evaluator::evaluate(const std::vector<std::string> &holeCards,
			   const std::vector<std::string> &boardCards,
			   const std::string &myDiscard){
  
  std::string calcString="";
  int numHole = holeCards.size();
  if (numHole == 2){
    calcString = holeCards[0] + holeCards[1] + ":XX";
  } else if (numHole == 3){
    calcString = holeCards[0] + holeCards[1] + holeCards[2] + ":XXX";
  } else {
    std::cout << "shit." << std::endl;
  }
  
  // create board c_string
  std::string boardString;
  char board_c_str[boardString.size()+1];
  for (int i=0;i<boardCards.size();i++) boardString = boardString + boardCards[i];  
  for (int i=0;i<boardString.size();++i) board_c_str[i] = boardString[i];
  board_c_str[boardString.size()] = '\0';

  // create discard c_string
  char discard_c_str[myDiscard.size()+1];
  for (int i=0;i<myDiscard.size(); i++) discard_c_str[i] = myDiscard[i];
  discard_c_str[myDiscard.size()] = '\0';

  std::cout << "calcstring: " << calcString << " | " << "boardString: " << boardString << "myDicsard: " << myDiscard << std::endl;
      
  Results *result;
  calc(calcString.c_str(), board_c_str, discard_c_str, 10000, result);
  
  return *(result->ev);
 }
